from __future__ import annotations

from typing import Protocol

from app.domain.models.CharacterModel import Character
from app.domain.models.QuestModel import Quest
from app.domain.models.SummaryModel import QuestSummary
from app.domain.models.UserModel import User


class UsersRepo(Protocol):
    async def get(self, user_id: str) -> User: ...
    async def upsert(self, user: User) -> bool: ...
    async def delete(self, user_id: str) -> bool: ...
    async def next_id(self) -> str: ...
    async def exists(self, user_id: str) -> bool: ...
    async def get_by_discord_id(self, discord_id: str) -> User | None: ...


class CharactersRepo(Protocol):
    async def get(self, character_id: str) -> Character: ...
    async def upsert(self, character: Character) -> bool: ...
    async def delete(self, character_id: str) -> bool: ...
    async def next_id(self) -> str: ...
    async def exists(self, character_id: str) -> bool: ...


class QuestsRepo(Protocol):
    async def get(self, quest_id: str) -> Quest: ...
    async def upsert(self, quest: Quest) -> bool: ...
    async def delete(self, quest_id: str) -> bool: ...
    async def next_id(self) -> str: ...
    async def exists(self, quest_id: str) -> bool: ...


class SummariesRepo(Protocol):
    async def get(self, summary_id: str) -> QuestSummary: ...
    async def upsert(self, summary: QuestSummary) -> bool: ...
    async def delete(self, summary_id: str) -> bool: ...
    async def next_id(self) -> str: ...
    async def exists(self, summary_id: str) -> bool: ...
