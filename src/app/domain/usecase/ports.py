from __future__ import annotations

from typing import Protocol

from app.domain.models.CharacterModel import Character
from app.domain.models.QuestModel import Quest
from app.domain.models.SummaryModel import QuestSummary
from app.domain.models.UserModel import User


class UsersRepo(Protocol):
	async def get(self, guild_id: int, user_id: str) -> User | None: ...
	async def upsert(self, guild_id: int, user: User) -> bool: ...
	async def delete(self, guild_id: int, user_id: str) -> bool: ...
	async def next_id(self, guild_id: int) -> str: ...
	async def exists(self, guild_id: int, user_id: str) -> bool: ...
	async def get_by_discord_id(self, guild_id: int, discord_id: str) -> User | None: ...


class CharactersRepo(Protocol):
	async def get(self, guild_id: int, character_id: str) -> Character | None: ...
	async def upsert(self, guild_id: int, character: Character) -> bool: ...
	async def delete(self, guild_id: int, character_id: str) -> bool: ...
	async def next_id(self, guild_id: int) -> str: ...
	async def exists(self, guild_id: int, character_id: str) -> bool: ...


class QuestsRepo(Protocol):
	async def get(self, guild_id: int, quest_id: str) -> Quest | None: ...
	async def upsert(self, guild_id: int, quest: Quest) -> bool: ...
	async def delete(self, guild_id: int, quest_id: str) -> bool: ...
	async def next_id(self, guild_id: int) -> str: ...
	async def exists(self, guild_id: int, quest_id: str) -> bool: ...


class SummariesRepo(Protocol):
	async def get(self, guild_id: int, summary_id: str) -> QuestSummary | None: ...
	async def upsert(self, guild_id: int, summary: QuestSummary) -> bool: ...
	async def delete(self, guild_id: int, summary_id: str) -> bool: ...
	async def next_id(self, guild_id: int) -> str: ...
	async def exists(self, guild_id: int, summary_id: str) -> bool: ...
