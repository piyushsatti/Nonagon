from __future__ import annotations
from typing import Protocol, Iterable, Optional

from app.domain.models.user.UserModel import User
from app.domain.models.quest.QuestModel import Quest, QuestStatus
from app.domain.models.quest.SummaryModel import QuestSummary

# --------- domain/application errors ----------
class NotFoundError(RuntimeError): ...
class ForbiddenError(RuntimeError): ...
class InvalidOperationError(RuntimeError): ...

# --------- repository contracts (thin & async) ----------
class UsersRepo(Protocol):
    async def get(self, user_id: str) -> User: ...
    async def upsert(self, user: User) -> None: ...
    async def exists(self, user_id: str) -> bool: ...

class QuestsRepo(Protocol):
    async def get(self, quest_id: str) -> Quest: ...
    async def upsert(self, quest: Quest) -> None: ...
    async def next_id(self) -> str: ...
    async def list_for_dm(
        self,
        dm_id: str,
        *,
        status: Optional[QuestStatus] = None,
        skip: int = 0,
        limit: int = 50,
    ) -> Iterable[Quest]: ...

class SummariesRepo(Protocol):
    async def get(self, summary_id: str) -> QuestSummary: ...
    async def upsert(self, summary: QuestSummary) -> None: ...
    async def next_id(self) -> str: ...
    async def list_for_quest(
        self,
        quest_id: str,
        *,
        include_private: bool = False,
    ) -> Iterable[QuestSummary]: ...